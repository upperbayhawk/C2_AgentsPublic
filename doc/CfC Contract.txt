pragma solidity >=0.4.21 <0.8.6;
pragma experimental ABIEncoderV2;
//"SPDX-License-Identifier: UNLICENSED" for non-open-source code. Please see https://spdx.org for more information.
import "./Ownable.sol";
import "./DateLib.sol";

/// @title CurrentForCarbon
/// @author Dave Hardin
/// notice 
contract CurrentForCarbon is Ownable {
    using DateLib for DateLib.DateTime;

    struct GamePlayer {
        string gamePlayerIDIdx;
        string gamePlayerID;
        bytes32 gamePlayerSignature; // sha256 of dataConnectionString, gamePlayerAddress, gamePlayerID
        string dataConnectionString;
        address gamePlayerAddress;  
        bool signatureMatches;
        bool active;
    }

    struct GameEvent {
        string gameEventIDIdx;    
        string gameEventNameIdx;    
        string gameEventID;    
        bytes32 gameEventSignature;
        string gameEventName;    
        string gameEventType;  
        string gameEventStartTime;     
        string gameEventEndTime;       
        string gameEventDuration;
        string dollarPerPoint;
        string pointsPerWatt;
        string pointsPerPercent;
     }

    struct GameResult {
        string gamePlayerIDIdx;   
        string gameEventIDIdx;    
        bytes32 gameResultID;  //sha256 of playerid + eventID
        string gamePlayerID;   
        string gameEventID;    
        address gamePlayerAddress;   
        bytes32 gamePlayerSignature;
        string averagePowerInWatts;
        string baselineAveragePowerInWatts;
        string deltaAveragePowerInWatts;
        string percentPoints;
        string wattPoints;
        string totalPointsAwarded;
        string awardValue;
        bool confirmed;
    }
   
   // EVENTS
   event GamePlayerEvent(
        string indexed gamePlayerIDIdx,
        string gamePlayerID,
        string dataConnectionString,
        address gamePlayerAddress,
        bool active
      
   );

    event GameEventEvent(
        string indexed gameEventIDIdx,
        string indexed gameEventNameIdx,
        string gameEventID,
        string gameEventName,
        string gameEventType,  
        string gameEventStartTime,
        string gameEventEndTime,     
        string gameEventDuration,
        string dollarPerPoint,
        string pointsPerWatt,
        string pointsPerPercent
    );

    event GameResultEvent(
        string indexed gamePlayerIDIdx,
        string indexed gameEventIDIdx,
        string gamePlayerID,
        string gameEventID,
        string averagePowerInWatts,
        string baselineAveragePowerInWatts,
        string deltaAveragePowerInWatts,
        string percentPoints,
        string wattPoints,
        string totalPointsAwarded,
        string awardValue,
        bool confirmed
    );
  
    GamePlayer[] _gamePlayers;
    mapping(bytes32 => uint) _gamePlayerIDHashToIndex;
    GameEvent[] _gameEvents;
    mapping(bytes32 => uint) _gameEventIDHashToIndex;
    GameResult[] _gameResults;
    mapping(bytes32 => uint) _gameResultIDHashToIndex;
    
    string public _contractName;

    /// External State Variables
    bool public HasResultReadyFlag = false;

    /// construction of contract
    constructor ()  {
        _contractName = "Upperbay Systems CurrentForCarbon V1";
    }
  
    // function _getDataItemIndex(bytes32 _dataItemId) private view returns (uint) {
    //     return dataItemIdToIndex[_dataItemId]-1;
    // }
      
    function GamePlayerExists(bytes32 _gamePlayerIDHash) public view returns (bool) {
        if (_gamePlayers.length == 0)
            return false;
        uint index = _gamePlayerIDHashToIndex[_gamePlayerIDHash];
        return (index > 0);
    }

    function GameEventExists(bytes32 _gameEventIDHash) public view returns (bool) {
        if (_gameEvents.length == 0)
            return false;
        uint index = _gameEventIDHashToIndex[_gameEventIDHash];
        return (index > 0);
    }

    function GameResultExists(bytes32 _gameResultIDHash) public view returns (bool) {
        if (_gameResults.length == 0)
            return false;
        uint index = _gameResultIDHashToIndex[_gameResultIDHash];
        return (index > 0);
    }

    

    function  AddGamePlayer (
        string memory gamePlayerID,
        address playerAddress,
        string memory dataConnectionString
       
        )  public { //onlyOwner

        //hash the crucial info to get a unique id
        //bytes32 id = keccak256(abi.encodePacked(_name, _description, _accessPath, _creationTime));
        bytes32 gamePlayerSignature = sha256 (abi.encodePacked(dataConnectionString, playerAddress,gamePlayerID));
        bytes32 gamePlayerIDHash = sha256 (abi.encodePacked(gamePlayerID));
        //require that the match be unique (not already added)
        require(!GamePlayerExists(gamePlayerIDHash));

        GamePlayer memory gamePlayer;
        gamePlayer.gamePlayerIDIdx = gamePlayerID; 
        gamePlayer.gamePlayerID = gamePlayerID; 
        gamePlayer.dataConnectionString = dataConnectionString;   
        gamePlayer.gamePlayerAddress = playerAddress;
        gamePlayer.gamePlayerSignature = gamePlayerSignature;
        gamePlayer.active = true;
       
        _gamePlayers.push(gamePlayer);
        uint newIndex = _gamePlayers.length - 1;
        _gamePlayerIDHashToIndex[gamePlayerIDHash] = newIndex;
        
        emit GamePlayerEvent(
                            gamePlayer.gamePlayerIDIdx,
                            gamePlayer.gamePlayerID,
                            gamePlayer.dataConnectionString,
                            gamePlayer.gamePlayerAddress,
                            gamePlayer.active
                            );
    }

    function AddGameEvent (
        string memory gameEventID,
        string memory gameEventName,
        string memory gameEventType,
        string memory gameEventStartTime,
        string memory gameEventEndTime,     
        string memory gameEventDuration,
        string memory dollarPerPoint,
        string memory pointsPerWatt,
        string memory pointsPerPercent
        )  public 
    { //onlyOwner

        //hash the crucial info to get a unique id
        //bytes32 id = keccak256(abi.encodePacked(_name, _description, _accessPath, _creationTime));
        bytes32 gameEventIDHash = sha256 (abi.encodePacked(gameEventID));
        
        //require that the match be unique (not already added)
        require(!GamePlayerExists(gameEventIDHash));
        
        GameEvent memory gameEvent;
        gameEvent.gameEventSignature = gameEventIDHash;
        gameEvent.gameEventIDIdx = gameEventID;
        gameEvent.gameEventNameIdx = gameEventName;   
        gameEvent.gameEventID = gameEventID;
        gameEvent.gameEventName = gameEventName;   
        gameEvent.gameEventType = gameEventType;
        gameEvent.gameEventStartTime = gameEventStartTime;
        gameEvent.gameEventEndTime = gameEventEndTime;
        gameEvent.gameEventDuration = gameEventDuration;
        gameEvent.dollarPerPoint = dollarPerPoint;
        gameEvent.pointsPerWatt = pointsPerWatt;
        gameEvent.pointsPerPercent = pointsPerPercent;

        _gameEvents.push(gameEvent);
        uint newIndex = _gameEvents.length - 1;
        _gameEventIDHashToIndex[gameEventIDHash] = newIndex;


        emit GameEventEvent(
                gameEvent.gameEventIDIdx,
                gameEvent.gameEventNameIdx,
                gameEventID,
                gameEventName,
                gameEventType,  
                gameEventStartTime,
                gameEventEndTime,     
                gameEventDuration,
                dollarPerPoint,
                pointsPerWatt,
                pointsPerPercent  
                );
    }

  function AddGameResult (
        string memory gamePlayerID,   
        string memory gameEventID, 
        address gamePlayerAddress,   
        string memory averagePowerInWatts,
        string memory baselineAveragePowerInWatts,
        string memory deltaAveragePowerInWatts,
        string memory percentPoints,
        string memory wattPoints,
        string memory totalPointsAwarded,
        string memory awardValue
        )     public  
    { //onlyOwner

        //TODO Check if player is active!!!

        //hash the crucial info to get a unique id
        //bytes32 id = keccak256(abi.encodePacked(_name, _description, _accessPath, _creationTime));
        bytes32 gameResultIDHash = sha256 (abi.encodePacked(gamePlayerID,gameEventID));
        
        //require that the match be unique (not already added)
        require(!GameResultExists(gameResultIDHash));
        
        GameResult memory gameResult;
        gameResult.gameResultID = gameResultIDHash;
        gameResult.gamePlayerIDIdx = gamePlayerID;
        gameResult.gameEventIDIdx = gameEventID;   
        gameResult.gamePlayerID = gamePlayerID;
        gameResult.gameEventID = gameEventID;   
        gameResult.gamePlayerAddress = gamePlayerAddress;
        //gameResult.gamePlayerSignature = gamePlayerSignature;
        gameResult.averagePowerInWatts = averagePowerInWatts;
        gameResult.baselineAveragePowerInWatts = baselineAveragePowerInWatts;
        gameResult.deltaAveragePowerInWatts = deltaAveragePowerInWatts;
        gameResult.percentPoints = percentPoints;
        gameResult.wattPoints = wattPoints;
        gameResult.totalPointsAwarded = totalPointsAwarded;
        gameResult.awardValue = awardValue;
        gameResult.confirmed = false;

        _gameResults.push(gameResult);
        uint newIndex = _gameResults.length - 1;
        _gameResultIDHashToIndex[gameResultIDHash] = newIndex;
       
        emit GameResultEvent(
                    gameResult.gamePlayerIDIdx,
                    gameResult.gameEventIDIdx,
                    gamePlayerID,
                    gameEventID,
                    averagePowerInWatts,
                    baselineAveragePowerInWatts,
                    deltaAveragePowerInWatts,
                    percentPoints,
                    wattPoints,
                    totalPointsAwarded,
                    awardValue,
                    gameResult.confirmed  
                     );
    }



 
 ///////////////////////////
//   function logAllPlayers() public {
//        // bytes32[] memory output = new bytes32[](_gamePlayers.length);

//         //get all ids
//         if (_gamePlayers.length > 0) {
//             //uint index = 0;
//             for (uint n = _gamePlayers.length; n > 0; n--) {
//                 emit GamePlayerEvent(
//                     _gamePlayers[n-1].gamePlayerID,
//                     _gamePlayers[n-1].gamePlayerSignature,
//                     _gamePlayers[n-1].dataConnectionString,
//                     _gamePlayers[n-1].gamePlayerAddress,
//                     _gamePlayers[n-1].active
//                     );  
//                 //output[index++] = _gamePlayers[n-1].gamePlayerSignature;
//             }
//         }
//     }

//     function logAllEvents() public view returns (string[] memory) {
//         string[] memory output = new string[](_gameEvents.length);

//         //get all ids
//         if (_gameEvents.length > 0) {
//             uint index = 0;
//             for (uint n = _gameEvents.length; n > 0; n--) {
//                 output[index++] = _gameEvents[n-1].gameEventID;
//             }
//         }
//         return output;
//     }

// function logAllResults() public view returns (bytes32[] memory) {
//         bytes32[] memory output = new bytes32[](_gameResults.length);

//         //get all ids
//         if (_gameResults.length > 0) {
//             uint index = 0;
//             for (uint n = _gameResults.length; n > 0; n--) {
//                 output[index++] = _gameResults[n-1].gameResultID;
//             }
//         }
//         return output;
//     }


// /////////////////////////
//     function getAllPlayers() public view returns (string[] memory) {
//         string[] memory output = new string[](_gamePlayers.length);

//         //get all ids
//         if (_gamePlayers.length > 0) {
//             uint index = 0;
//             for (uint n = _gamePlayers.length; n > 0; n--) {
//                 output[index++] = _gamePlayers[n-1].gamePlayerID;
//             }
//         }
//         return output;
//     }

//     function getAllEvents() public view returns (string[] memory) {
//         string[] memory output = new string[](_gameEvents.length);

//         //get all ids
//         if (_gameEvents.length > 0) {
//             uint index = 0;
//             for (uint n = _gameEvents.length; n > 0; n--) {
//                 output[index++] = _gameEvents[n-1].gameEventID;
//             }
//         }
//         return output;
//     }

//     function getAllResults() public view returns (bytes32[] memory) {
//         bytes32[] memory output = new bytes32[](_gameResults.length);

//         //get all ids
//         if (_gameResults.length > 0) {
//             uint index = 0;
//             for (uint n = _gameResults.length; n > 0; n--) {
//                 output[index++] = _gameResults[n-1].gameResultID;
//             }
//         }
//         return output;
//     }
//////////////////////////////////



    /// notice can be used by a client contract to ensure that they've connected to this contract interface successfully
    /// @return true, unconditionally
    function testConnection() public pure returns (bool) 
    {
        return true;
    }



    /// notice gets the address of this contract
    /// @return address
    function getAddress() public view returns (address) 
    {
        return address(this);
    }


 
    /// notice for testing
    function addTestData() external onlyOwner 
    {
        //addDataItem("ElectricDemand", "Electricity Demand for 13470", "ThingSpeak", "Now");
        // addDataItem("Macquiao vs. Payweather", "Macquiao|Payweather", 2, DateLib.DateTime(2018, 8, 15, 0, 0, 0, 0, 0).toUnixTimestamp());
        // addDataItem("Pacweather vs. Macarthur", "Pacweather|Macarthur", 2, DateLib.DateTime(2018, 9, 3, 0, 0, 0, 0, 0).toUnixTimestamp());
        // addDataItem("Macarthur vs. Truman", "Macarthur|Truman", 2, DateLib.DateTime(2018, 9, 3, 0, 0, 0, 0, 0).toUnixTimestamp());
        // addDataItem("Macaque vs. Pregunto", "Macaque|Pregunto", 2, DateLib.DateTime(2018, 9, 21, 0, 0, 0, 0, 0).toUnixTimestamp());
        // addDataItem("Farsworth vs. Wernstrom", "Farsworth|Wernstrom", 2, DateLib.DateTime(2018, 9, 29, 0, 0, 0, 0, 0).toUnixTimestamp());
        // addDataItem("Fortinbras vs. Hamlet", "Fortinbras|Hamlet", 2, DateLib.DateTime(2018, 10, 10, 0, 0, 0, 0, 0).toUnixTimestamp());
        // addDataItem("Foolicle vs. Pretendo", "Foolicle|Pretendo", 2, DateLib.DateTime(2018, 11, 11, 0, 0, 0, 0, 0).toUnixTimestamp());
        // addDataItem("Parthian vs. Scythian", "Parthian|Scythian", 2, DateLib.DateTime(2018, 11, 12, 0, 0, 0, 0, 0).toUnixTimestamp());
    }

    // function StringtoAddress(string memory _a) internal pure returns (address _parsedAddress) {
    //     bytes memory tmp = bytes(_a);
    //     uint160 iaddr = 0;
    //     uint160 b1;
    //     uint160 b2;
    //     for (uint i = 2; i < 2 + 2 * 20; i += 2) {
    //         iaddr *= 256;
    //         b1 = uint160(uint8(tmp[i]));
    //         b2 = uint160(uint8(tmp[i + 1]));
    //         if ((b1 >= 97) && (b1 <= 102)) {
    //             b1 -= 87;
    //         } else if ((b1 >= 65) && (b1 <= 70)) {
    //             b1 -= 55;
    //         } else if ((b1 >= 48) && (b1 <= 57)) {
    //             b1 -= 48;
    //         }
    //         if ((b2 >= 97) && (b2 <= 102)) {
    //             b2 -= 87;
    //         } else if ((b2 >= 65) && (b2 <= 70)) {
    //             b2 -= 55;
    //         } else if ((b2 >= 48) && (b2 <= 57)) {
    //             b2 -= 48;
    //         }
    //         iaddr += (b1 * 16 + b2);
    //     }
    //     return address(iaddr);
    // }


    // function StringToBytes32(string memory source) internal pure returns (bytes32 result) {
    //     bytes memory tempEmptyStringTest = bytes(source);
    //     if (tempEmptyStringTest.length == 0) {
    //         return 0x0;
    //     }
    //     assembly {
    //         result := mload(add(source, 32))
    //     }
    // }

    function Bytes32ToString(bytes32 x) internal pure returns (string memory)  {
    bytes memory bytesString = new bytes(32);
    uint charCount = 0;
    for (uint j = 0; j < 32; j++) {
        bytes1 char = bytes1(bytes32(uint(x) * 2 ** (8 * j)));
        if (char != 0) {
            bytesString[charCount] = char;
            charCount++;
        }
    }
    bytes memory bytesStringTrimmed = new bytes(charCount);
    for (uint j = 0; j < charCount; j++) {
        bytesStringTrimmed[j] = bytesString[j];
    }
    return string(bytesStringTrimmed);
    }

    // function StringCompare(string memory a, string memory b) internal pure returns (bool) {
    // //function HashCompareWithLengthCheck(string a, string b) internal returns (bool) {
    //     if(bytes(a).length != bytes(b).length) {
    //         return false;
    //     } else {
    //         return keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b));
    //     }
    // }

  /// destroy the contract and reclaim the leftover funds.
    function kill() public onlyOwner 
    {
        //require(msg.sender == owner);
        selfdestruct(payable(msg.sender));
    }
}
